#!/bin/bash
exit_loop=0;
pids=();

# Function to handle Ctrl+C
ctrl_c_handler() {
  echo "Ctrl+C detected. Exiting... waiting for $(job_count) jobs";
  exit_loop=1;
}

# Trap SIGINT and call the function
trap ctrl_c_handler SIGINT

SOURCE="";
TARGET=""

function replicate() {
        PAYLOAD="{ \"create_target\": true, \"source\": \"${SOURCE}/$1\",\"target\": \"${TARGET}/$1\"}";
        echo $PAYLOAD;
        curl -H 'content-type: application/json' -X 'POST' "$TARGET/_replicate" -d "$PAYLOAD" -w "%{http_code}";
        echo -e "\n\n";
        #sleep 5;

}



# Example items to process
#items=(one two three four five six seven eight nine ten eleven twelve)
items=($(echo $(curl $SOURCE/_all_dbs) | jq -c '.[]' | jq -r .))
# Max number of concurrent jobs
max_jobs=8

# Function to simulate work
process_item() {
    local item="$1"
    echo "Starting $item"
    sleep $((RANDOM % 5 + 1))  # Random sleep 1â€“5 seconds
    echo "Finished $item"
}

# Function to count running background jobs
job_count() {
    jobs -rp | wc -l
}
count=${#items[@]}
current_count=0

for item in "${items[@]}"; do
    # Wait for a slot to open if we're at the max
    while [ "$(job_count)" -ge "$max_jobs" ]; do
        #echo "Sleeping on $(job_count) jobs";
        sleep 0.5  # Avoid busy waiting
    done
        if [[ "$exit_loop" -eq 1 ]]; then break; fi
    
        item=$(echo $item | jq -Rr @uri);
        current_count=$((current_count + 1))
        echo "Processing ${current_count} of ${count} job count $(job_count)";
    #replicate "$item" &
        (trap "" SIGINT; replicate "$item") & pids+=($!)
done

# Wait for all remaining jobs to finish
echo "Waiting on ${#pids[@]} background jobs..."
#for pid in "${pids[@]}"; do
#       if kill -0 "$pid" 2>/dev/null; then
#               wait "$pid"
#       fi
#done

echo "Waiting for the rest of the jobs to finish";
wait
